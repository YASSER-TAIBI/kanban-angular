{"ast":null,"code":"import { signal } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class BoardService {\n  constructor() {\n    this.boards = signal([{\n      id: '1',\n      title: 'Projet Web',\n      lists: [{\n        id: '1',\n        title: 'À faire',\n        boardId: '1',\n        position: 0,\n        cards: [{\n          id: '1',\n          title: 'Créer le design',\n          description: 'Faire les maquettes UI/UX',\n          listId: '1',\n          position: 0\n        }]\n      }, {\n        id: '2',\n        title: 'En cours',\n        boardId: '1',\n        position: 1,\n        cards: []\n      }, {\n        id: '3',\n        title: 'Terminé',\n        boardId: '1',\n        position: 2,\n        cards: []\n      }]\n    }]);\n  }\n  getBoards() {\n    return this.boards;\n  }\n  addBoard(title) {\n    const newBoard = {\n      id: Date.now().toString(),\n      title,\n      lists: []\n    };\n    this.boards.update(boards => [...boards, newBoard]);\n  }\n  addList(boardId, title) {\n    this.boards.update(boards => boards.map(board => {\n      if (board.id === boardId) {\n        return {\n          ...board,\n          lists: [...board.lists, {\n            id: Date.now().toString(),\n            title,\n            boardId,\n            position: board.lists.length,\n            cards: []\n          }]\n        };\n      }\n      return board;\n    }));\n  }\n  addCard(listId, title, description) {\n    this.boards.update(boards => boards.map(board => ({\n      ...board,\n      lists: board.lists.map(list => {\n        if (list.id === listId) {\n          return {\n            ...list,\n            cards: [...list.cards, {\n              id: Date.now().toString(),\n              title,\n              description,\n              listId,\n              position: list.cards.length\n            }]\n          };\n        }\n        return list;\n      })\n    })));\n  }\n  moveCard(cardId, fromListId, toListId) {\n    this.boards.update(boards => boards.map(board => ({\n      ...board,\n      lists: board.lists.map(list => {\n        if (list.id === fromListId) {\n          return {\n            ...list,\n            cards: list.cards.filter(card => card.id !== cardId)\n          };\n        }\n        if (list.id === toListId) {\n          const cardToMove = board.lists.find(l => l.id === fromListId)?.cards.find(c => c.id === cardId);\n          if (cardToMove) {\n            return {\n              ...list,\n              cards: [...list.cards, {\n                ...cardToMove,\n                listId: toListId\n              }]\n            };\n          }\n        }\n        return list;\n      })\n    })));\n  }\n  deleteBoard(boardId) {\n    this.boards.update(boards => boards.filter(board => board.id !== boardId));\n  }\n  deleteList(listId) {\n    this.boards.update(boards => boards.map(board => ({\n      ...board,\n      lists: board.lists.filter(list => list.id !== listId)\n    })));\n  }\n  deleteCard(cardId) {\n    this.boards.update(boards => boards.map(board => ({\n      ...board,\n      lists: board.lists.map(list => ({\n        ...list,\n        cards: list.cards.filter(card => card.id !== cardId)\n      }))\n    })));\n  }\n  static {\n    this.ɵfac = function BoardService_Factory(t) {\n      return new (t || BoardService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BoardService,\n      factory: BoardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["signal","BoardService","constructor","boards","id","title","lists","boardId","position","cards","description","listId","getBoards","addBoard","newBoard","Date","now","toString","update","addList","map","board","length","addCard","list","moveCard","cardId","fromListId","toListId","filter","card","cardToMove","find","l","c","deleteBoard","deleteList","deleteCard","factory","ɵfac","providedIn"],"sources":["/Users/macbook/CascadeProjects/kanban-angular/src/app/services/board.service.ts"],"sourcesContent":["import { Injectable, signal } from '@angular/core';\nimport { Board } from '../models/board.model';\nimport { List } from '../models/list.model';\nimport { Card } from '../models/card.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoardService {\n  private boards = signal<Board[]>([\n    {\n      id: '1',\n      title: 'Projet Web',\n      lists: [\n        {\n          id: '1',\n          title: 'À faire',\n          boardId: '1',\n          position: 0,\n          cards: [\n            {\n              id: '1',\n              title: 'Créer le design',\n              description: 'Faire les maquettes UI/UX',\n              listId: '1',\n              position: 0\n            }\n          ]\n        },\n        {\n          id: '2',\n          title: 'En cours',\n          boardId: '1',\n          position: 1,\n          cards: []\n        },\n        {\n          id: '3',\n          title: 'Terminé',\n          boardId: '1',\n          position: 2,\n          cards: []\n        }\n      ]\n    }\n  ]);\n\n  getBoards() {\n    return this.boards;\n  }\n\n  addBoard(title: string) {\n    const newBoard: Board = {\n      id: Date.now().toString(),\n      title,\n      lists: []\n    };\n    this.boards.update(boards => [...boards, newBoard]);\n  }\n\n  addList(boardId: string, title: string) {\n    this.boards.update(boards => \n      boards.map(board => {\n        if (board.id === boardId) {\n          return {\n            ...board,\n            lists: [...board.lists, {\n              id: Date.now().toString(),\n              title,\n              boardId,\n              position: board.lists.length,\n              cards: []\n            }]\n          };\n        }\n        return board;\n      })\n    );\n  }\n\n  addCard(listId: string, title: string, description: string) {\n    this.boards.update(boards =>\n      boards.map(board => ({\n        ...board,\n        lists: board.lists.map(list => {\n          if (list.id === listId) {\n            return {\n              ...list,\n              cards: [...list.cards, {\n                id: Date.now().toString(),\n                title,\n                description,\n                listId,\n                position: list.cards.length\n              }]\n            };\n          }\n          return list;\n        })\n      }))\n    );\n  }\n\n  moveCard(cardId: string, fromListId: string, toListId: string) {\n    this.boards.update(boards =>\n      boards.map(board => ({\n        ...board,\n        lists: board.lists.map(list => {\n          if (list.id === fromListId) {\n            return {\n              ...list,\n              cards: list.cards.filter(card => card.id !== cardId)\n            };\n          }\n          if (list.id === toListId) {\n            const cardToMove = board.lists\n              .find(l => l.id === fromListId)\n              ?.cards.find(c => c.id === cardId);\n            if (cardToMove) {\n              return {\n                ...list,\n                cards: [...list.cards, { ...cardToMove, listId: toListId }]\n              };\n            }\n          }\n          return list;\n        })\n      }))\n    );\n  }\n\n  deleteBoard(boardId: string) {\n    this.boards.update(boards => boards.filter(board => board.id !== boardId));\n  }\n\n  deleteList(listId: string) {\n    this.boards.update(boards =>\n      boards.map(board => ({\n        ...board,\n        lists: board.lists.filter(list => list.id !== listId)\n      }))\n    );\n  }\n\n  deleteCard(cardId: string) {\n    this.boards.update(boards =>\n      boards.map(board => ({\n        ...board,\n        lists: board.lists.map(list => ({\n          ...list,\n          cards: list.cards.filter(card => card.id !== cardId)\n        }))\n      }))\n    );\n  }\n}\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;;AAQlD,OAAM,MAAOC,YAAY;EAHzBC,YAAA;IAIU,KAAAC,MAAM,GAAGH,MAAM,CAAU,CAC/B;MACEI,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,YAAY;MACnBC,KAAK,EAAE,CACL;QACEF,EAAE,EAAE,GAAG;QACPC,KAAK,EAAE,SAAS;QAChBE,OAAO,EAAE,GAAG;QACZC,QAAQ,EAAE,CAAC;QACXC,KAAK,EAAE,CACL;UACEL,EAAE,EAAE,GAAG;UACPC,KAAK,EAAE,iBAAiB;UACxBK,WAAW,EAAE,2BAA2B;UACxCC,MAAM,EAAE,GAAG;UACXH,QAAQ,EAAE;SACX;OAEJ,EACD;QACEJ,EAAE,EAAE,GAAG;QACPC,KAAK,EAAE,UAAU;QACjBE,OAAO,EAAE,GAAG;QACZC,QAAQ,EAAE,CAAC;QACXC,KAAK,EAAE;OACR,EACD;QACEL,EAAE,EAAE,GAAG;QACPC,KAAK,EAAE,SAAS;QAChBE,OAAO,EAAE,GAAG;QACZC,QAAQ,EAAE,CAAC;QACXC,KAAK,EAAE;OACR;KAEJ,CACF,CAAC;;EAEFG,SAASA,CAAA;IACP,OAAO,IAAI,CAACT,MAAM;EACpB;EAEAU,QAAQA,CAACR,KAAa;IACpB,MAAMS,QAAQ,GAAU;MACtBV,EAAE,EAAEW,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ,EAAE;MACzBZ,KAAK;MACLC,KAAK,EAAE;KACR;IACD,IAAI,CAACH,MAAM,CAACe,MAAM,CAACf,MAAM,IAAI,CAAC,GAAGA,MAAM,EAAEW,QAAQ,CAAC,CAAC;EACrD;EAEAK,OAAOA,CAACZ,OAAe,EAAEF,KAAa;IACpC,IAAI,CAACF,MAAM,CAACe,MAAM,CAACf,MAAM,IACvBA,MAAM,CAACiB,GAAG,CAACC,KAAK,IAAG;MACjB,IAAIA,KAAK,CAACjB,EAAE,KAAKG,OAAO,EAAE;QACxB,OAAO;UACL,GAAGc,KAAK;UACRf,KAAK,EAAE,CAAC,GAAGe,KAAK,CAACf,KAAK,EAAE;YACtBF,EAAE,EAAEW,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ,EAAE;YACzBZ,KAAK;YACLE,OAAO;YACPC,QAAQ,EAAEa,KAAK,CAACf,KAAK,CAACgB,MAAM;YAC5Bb,KAAK,EAAE;WACR;SACF;;MAEH,OAAOY,KAAK;IACd,CAAC,CAAC,CACH;EACH;EAEAE,OAAOA,CAACZ,MAAc,EAAEN,KAAa,EAAEK,WAAmB;IACxD,IAAI,CAACP,MAAM,CAACe,MAAM,CAACf,MAAM,IACvBA,MAAM,CAACiB,GAAG,CAACC,KAAK,KAAK;MACnB,GAAGA,KAAK;MACRf,KAAK,EAAEe,KAAK,CAACf,KAAK,CAACc,GAAG,CAACI,IAAI,IAAG;QAC5B,IAAIA,IAAI,CAACpB,EAAE,KAAKO,MAAM,EAAE;UACtB,OAAO;YACL,GAAGa,IAAI;YACPf,KAAK,EAAE,CAAC,GAAGe,IAAI,CAACf,KAAK,EAAE;cACrBL,EAAE,EAAEW,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ,EAAE;cACzBZ,KAAK;cACLK,WAAW;cACXC,MAAM;cACNH,QAAQ,EAAEgB,IAAI,CAACf,KAAK,CAACa;aACtB;WACF;;QAEH,OAAOE,IAAI;MACb,CAAC;KACF,CAAC,CAAC,CACJ;EACH;EAEAC,QAAQA,CAACC,MAAc,EAAEC,UAAkB,EAAEC,QAAgB;IAC3D,IAAI,CAACzB,MAAM,CAACe,MAAM,CAACf,MAAM,IACvBA,MAAM,CAACiB,GAAG,CAACC,KAAK,KAAK;MACnB,GAAGA,KAAK;MACRf,KAAK,EAAEe,KAAK,CAACf,KAAK,CAACc,GAAG,CAACI,IAAI,IAAG;QAC5B,IAAIA,IAAI,CAACpB,EAAE,KAAKuB,UAAU,EAAE;UAC1B,OAAO;YACL,GAAGH,IAAI;YACPf,KAAK,EAAEe,IAAI,CAACf,KAAK,CAACoB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC1B,EAAE,KAAKsB,MAAM;WACpD;;QAEH,IAAIF,IAAI,CAACpB,EAAE,KAAKwB,QAAQ,EAAE;UACxB,MAAMG,UAAU,GAAGV,KAAK,CAACf,KAAK,CAC3B0B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAKuB,UAAU,CAAC,EAC7BlB,KAAK,CAACuB,IAAI,CAACE,CAAC,IAAIA,CAAC,CAAC9B,EAAE,KAAKsB,MAAM,CAAC;UACpC,IAAIK,UAAU,EAAE;YACd,OAAO;cACL,GAAGP,IAAI;cACPf,KAAK,EAAE,CAAC,GAAGe,IAAI,CAACf,KAAK,EAAE;gBAAE,GAAGsB,UAAU;gBAAEpB,MAAM,EAAEiB;cAAQ,CAAE;aAC3D;;;QAGL,OAAOJ,IAAI;MACb,CAAC;KACF,CAAC,CAAC,CACJ;EACH;EAEAW,WAAWA,CAAC5B,OAAe;IACzB,IAAI,CAACJ,MAAM,CAACe,MAAM,CAACf,MAAM,IAAIA,MAAM,CAAC0B,MAAM,CAACR,KAAK,IAAIA,KAAK,CAACjB,EAAE,KAAKG,OAAO,CAAC,CAAC;EAC5E;EAEA6B,UAAUA,CAACzB,MAAc;IACvB,IAAI,CAACR,MAAM,CAACe,MAAM,CAACf,MAAM,IACvBA,MAAM,CAACiB,GAAG,CAACC,KAAK,KAAK;MACnB,GAAGA,KAAK;MACRf,KAAK,EAAEe,KAAK,CAACf,KAAK,CAACuB,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACpB,EAAE,KAAKO,MAAM;KACrD,CAAC,CAAC,CACJ;EACH;EAEA0B,UAAUA,CAACX,MAAc;IACvB,IAAI,CAACvB,MAAM,CAACe,MAAM,CAACf,MAAM,IACvBA,MAAM,CAACiB,GAAG,CAACC,KAAK,KAAK;MACnB,GAAGA,KAAK;MACRf,KAAK,EAAEe,KAAK,CAACf,KAAK,CAACc,GAAG,CAACI,IAAI,KAAK;QAC9B,GAAGA,IAAI;QACPf,KAAK,EAAEe,IAAI,CAACf,KAAK,CAACoB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC1B,EAAE,KAAKsB,MAAM;OACpD,CAAC;KACH,CAAC,CAAC,CACJ;EACH;;;uBAlJWzB,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAqC,OAAA,EAAZrC,YAAY,CAAAsC,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}